{
  "openapi" : "3.0.3",
  "info" : {
    "description" : "API reference for Devstream platform built with Spring Boot.",
    "license" : {
      "name" : "GPL-2.0-only",
      "url" : "https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html#SEC1"
    },
    "termsOfService" : "https://www.devstream.in/terms-and-conditions",
    "title" : "Devstream Aurelia OpenAPI Specification",
    "version" : "0.3.40"
  },
  "servers" : [ {
    "url" : "{protocol}://{environment}.devstream.in/v1",
    "variables" : {
      "protocol" : {
        "default" : "https",
        "enum" : [ "http", "https" ]
      },
      "environment" : {
        "default" : "api",
        "enum" : [ "api", "api.dev", "api.staging", "api.test" ]
      }
    }
  } ],
  "tags" : [ {
    "description" : "Endpoints related to user authentication (login, register, refresh token, forgot password, reset password).",
    "name" : "Auth"
  }, {
    "description" : "Endpoints for managing content (creating, retrieving, updating, deleting content, analytics).",
    "name" : "Content"
  }, {
    "description" : "Endpoint for checking the health of the API service.",
    "name" : "Health"
  }, {
    "description" : "Endpoints for interacting with external platforms (syncing data, retrieving platform information).",
    "name" : "Platforms"
  }, {
    "description" : "Endpoints for managing user information (profile, settings, analytics).",
    "name" : "User"
  }, {
    "description" : "Endpoints to deal with user content publishing pipeline.",
    "name" : "Pipeline"
  } ],
  "paths" : {
    "/health" : {
      "get" : {
        "description" : "Health check for the API.",
        "operationId" : "health-check",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HealthResponse"
                }
              }
            },
            "description" : "Success."
          },
          "400" : {
            "description" : "Bad request. Invalid input or parameters provided."
          },
          "503" : {
            "description" : "Service unavailable. The system is under maintenance or overloaded."
          }
        },
        "security" : [ ],
        "summary" : "Health check for the API.",
        "tags" : [ "Health" ]
      }
    },
    "/user/profile" : {
      "get" : {
        "operationId" : "get-user-profile-information",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserProfile"
                }
              }
            },
            "description" : "User profile retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid request format or parameters."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to view the profile."
          },
          "404" : {
            "description" : "Not found. User profile does not exist."
          },
          "500" : {
            "description" : "Internal server error. Something went wrong on the server."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Retrieve the current user's profile information.",
        "tags" : [ "User" ]
      },
      "patch" : {
        "operationId" : "update-user-profile-information",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserProfile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User profile updated successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid request format or missing required fields."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to update the profile."
          },
          "404" : {
            "description" : "Not found. User profile does not exist."
          },
          "500" : {
            "description" : "Internal server error. Something went wrong on the server."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Update user profile details.",
        "tags" : [ "User" ]
      }
    },
    "/user/settings" : {
      "get" : {
        "operationId" : "get-user-settings",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetUserSettingsResponse"
                }
              }
            },
            "description" : "Settings retrieved successfully."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to view settings."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Retrieve user-specific settings.",
        "tags" : [ "User" ]
      },
      "patch" : {
        "operationId" : "update-user-settings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateUserSettingsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Settings updated successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid request format or missing required fields."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to update settings."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Update user-specific settings.",
        "tags" : [ "User" ]
      }
    },
    "/user/analytics" : {
      "get" : {
        "operationId" : "get-user-analytics",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserAnalytics"
                }
              }
            },
            "description" : "User analytics retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid request format or parameters."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to view analytics."
          },
          "404" : {
            "description" : "Not found. User analytics data does not exist."
          },
          "500" : {
            "description" : "Internal server error. Something went wrong on the server."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "View overall analytics for the user.",
        "tags" : [ "User" ]
      }
    },
    "/user/{UserID}" : {
      "delete" : {
        "operationId" : "delete-user-profile",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "UserID",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "User deleted successfully."
          },
          "404" : {
            "description" : "User with given ID not found."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Deletes user profile.",
        "tags" : [ "User" ]
      }
    },
    "/auth/login" : {
      "post" : {
        "operationId" : "authenticate-user",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginResponse"
                }
              }
            },
            "description" : "Login successful."
          },
          "400" : {
            "description" : "Bad request. The input is invalid or missing required fields."
          },
          "401" : {
            "description" : "Unauthorized. Invalid credentials provided."
          },
          "403" : {
            "description" : "Forbidden. Access to the resource is denied."
          },
          "429" : {
            "description" : "Too many requests. Rate limit exceeded."
          }
        },
        "security" : [ ],
        "summary" : "Log in to the system.",
        "tags" : [ "Auth" ]
      }
    },
    "/auth/two-factor-auth" : {
      "post" : {
        "description" : "This is to validate the OTP generated if two factor authentication is enabled. The login ID must be tagged along with the OTP to map which login attempt this OTP belongs to.",
        "operationId" : "two-factor-auth",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TwofactorAuthRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginResponse"
                }
              }
            },
            "description" : "OTP is valid for the given login ID. Hence user is authenticated and both access and refresh tokens are granted."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description" : "Bad request. Either OTP or login ID or both are missing."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description" : "Unauthorized. The OTP does not match with the one generated for this login ID or invalid OTP is provided."
          }
        },
        "security" : [ ],
        "summary" : "Endpoint to validate OTP for two factor authentication.",
        "tags" : [ "Auth" ]
      }
    },
    "/auth/register" : {
      "post" : {
        "operationId" : "register-user",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegisterResponse"
                }
              }
            },
            "description" : "Registration successful."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description" : "Bad request. The input is invalid or missing required fields."
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description" : "Conflict. A user with the provided details already exists."
          }
        },
        "security" : [ ],
        "summary" : "Registers a new user into the system.",
        "tags" : [ "Auth" ]
      }
    },
    "/auth/refresh-token" : {
      "post" : {
        "operationId" : "refresh-auth-token",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RefreshTokenResponse"
                }
              }
            },
            "description" : "Token refreshed successfully."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description" : "Bad Request. The refresh token is missing or invalid."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description" : "Unauthorized. The provided refresh token is expired or revoked."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description" : "Forbidden. The request is not authorized (e.g., due to account restrictions)."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description" : "Not Found. The resource associated with the refresh token could not be found (unlikely, but possible)."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Refresh the authentication token.",
        "tags" : [ "Auth" ]
      }
    },
    "/auth/forgot-password" : {
      "post" : {
        "operationId" : "reset-password",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ForgotPasswordRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Password reset request processed successfully."
          },
          "302" : {
            "description" : "Found. User is already authenticated and redirected.",
            "headers" : {
              "Location" : {
                "description" : "URL where the user is redirected.",
                "explode" : false,
                "schema" : {
                  "format" : "uri",
                  "type" : "string"
                },
                "style" : "simple"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The input is invalid or missing required fields."
          },
          "401" : {
            "description" : "Unauthorized. Invalid authentication provided."
          },
          "403" : {
            "description" : "Forbidden. The user does not have permission to perform this action."
          },
          "404" : {
            "description" : "Not found. The user does not exist in the system."
          },
          "429" : {
            "description" : "Too many requests. Rate limit exceeded."
          },
          "500" : {
            "description" : "Internal server error. Something went wrong on the server."
          },
          "503" : {
            "description" : "Service unavailable. System is under maintenance or overloaded."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Request a password reset link.",
        "tags" : [ "Auth" ]
      }
    },
    "/auth/reset-password" : {
      "post" : {
        "operationId" : "reset-user-password",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Password reset successfully."
          },
          "400" : {
            "description" : "Bad request. The input is invalid or missing required fields."
          },
          "401" : {
            "description" : "Unauthorized. Invalid authentication provided."
          },
          "403" : {
            "description" : "Forbidden. The user does not have permission to reset the password."
          },
          "404" : {
            "description" : "Not found. The user does not exist in the system."
          },
          "429" : {
            "description" : "Too many requests. Rate limit exceeded."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Reset the user's password.",
        "tags" : [ "Auth" ]
      }
    },
    "/content" : {
      "get" : {
        "operationId" : "get-all-content-by-user-id",
        "parameters" : [ {
          "description" : "Filter content (e.g., by date or platform).",
          "explode" : true,
          "in" : "query",
          "name" : "filter",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContentListResponse"
                }
              }
            },
            "description" : "List of content retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid filter parameters."
          },
          "404" : {
            "description" : "No content found for the given filters."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "List all user content with optional filters.",
        "tags" : [ "Content" ]
      },
      "post" : {
        "description" : "On successful completion of this request, the response contents a pre signed url in which the user needs to upload the content. On successful completion of document update, it's responsibility of the document uploading server to notify the application server that the content has been uploaded.",
        "operationId" : "publish-content",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PreSignedURLResponse"
                }
              }
            },
            "description" : "Contents the generated pre signed URL, on which the client has to upload the content."
          },
          "400" : {
            "description" : "Invalid parameters for getting presigned URL."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Publish content for the user.",
        "tags" : [ "Content" ]
      }
    },
    "/content/{ContentID}" : {
      "delete" : {
        "operationId" : "delete-content",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Content deleted successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid or missing parameters."
          },
          "401" : {
            "description" : "Unauthorized. Invalid authentication provided."
          },
          "403" : {
            "description" : "Forbidden. Access to delete the content is denied."
          },
          "404" : {
            "description" : "Content not found."
          },
          "429" : {
            "description" : "Too many requests. Rate limit exceeded."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Delete a specific piece of content.",
        "tags" : [ "Content" ]
      },
      "get" : {
        "operationId" : "get-content-details",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContentDetails"
                }
              }
            },
            "description" : "Content details retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid or missing parameters."
          },
          "401" : {
            "description" : "Unauthorized. Invalid authentication provided."
          },
          "403" : {
            "description" : "Forbidden. Access to the content is denied."
          },
          "404" : {
            "description" : "Content not found."
          },
          "429" : {
            "description" : "Too many requests. Rate limit exceeded."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Retrieve details for a specific piece of content.",
        "tags" : [ "Content" ]
      }
    },
    "/content/status/{ContentID}" : {
      "get" : {
        "operationId" : "get-content-status",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/get_content_status_200_response"
                }
              }
            },
            "description" : "Content status retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid or missing parameters."
          },
          "404" : {
            "description" : "Content not found. The specified content ID does not exist."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Check the status of a specific piece of content.",
        "tags" : [ "Content" ]
      },
      "patch" : {
        "operationId" : "change-content-status-for-id",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateContentStatusRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Content status updated successfuly."
          },
          "404" : {
            "description" : "Could not find content with specified ID."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Changes content status for a particular content.",
        "tags" : [ "Content" ]
      }
    },
    "/content/invite/{ContentID}" : {
      "get" : {
        "operationId" : "get-pending-invitations",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollaborationActionResponse"
                }
              }
            },
            "description" : "List of pending invitations."
          },
          "404" : {
            "description" : "Content not found. The specified content ID does not exist."
          },
          "429" : {
            "description" : "Too many requests. Rate limit exceeded."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "View pending collaboration invitations.",
        "tags" : [ "Content" ]
      },
      "patch" : {
        "description" : "The user can accept or decline content request invitation. Need to consider whether to make a new endpoint for accept/decline invitations and use this endpoint for modifying access control instead. Reference of Google Zanziber can be used for access control.",
        "operationId" : "update-pending-invites-for-content-by-id",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollaborationActionResponse"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Invitation status updated."
          },
          "400" : {
            "description" : "Bad request. The action is invalid or the request is malformed."
          },
          "404" : {
            "description" : "Invitation not found. No invitation for the specified content ID."
          },
          "409" : {
            "description" : "Conflict. The action cannot be performed due to a conflict in the invitation status."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Accept or decline invitations.",
        "tags" : [ "Content" ]
      },
      "post" : {
        "operationId" : "send-collaboration-invitations",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CollaborationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Invitation sent successfully."
          },
          "400" : {
            "description" : "Bad request. The input is invalid or missing required fields."
          },
          "404" : {
            "description" : "Content not found. The specified content ID does not exist."
          },
          "409" : {
            "description" : "Conflict. Invitation already exists for the user."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Invite users to collaborate on content.",
        "tags" : [ "Content" ]
      }
    },
    "/content/analytics/{ContentID}" : {
      "get" : {
        "operationId" : "get-content-analytics",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContentAnalytics"
                }
              }
            },
            "description" : "Analytics data retrieved successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid or missing parameters."
          },
          "401" : {
            "description" : "Unauthorized. Invalid authentication provided."
          },
          "403" : {
            "description" : "Forbidden. Access to the content's analytics is denied."
          },
          "404" : {
            "description" : "Content not found."
          },
          "429" : {
            "description" : "Too many requests. Rate limit exceeded."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "View analytics for a specific piece of content.",
        "tags" : [ "Content" ]
      }
    },
    "/content/upload-finish/{ContentID}" : {
      "get" : {
        "description" : "After the upload has been finished in the object storage, the storage server will ping this endpoint with the content id. This endpoint will change the status of the content from uploading to processing and then further process the content stored in the object store.\nNote that this endpoint also changes the status of the content.",
        "operationId" : "content-upload-finished",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "ContentID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Content status successfully changed."
          },
          "400" : {
            "description" : "In case the previous status of the content is not uploading, this endpoint will not change the status to processing and will not do any task on the content."
          },
          "404" : {
            "description" : "The specified content ID does not exist."
          }
        },
        "security" : [ {
          "ApiKeyAuth" : [ ]
        } ],
        "summary" : "Handle content processing after upload finishes.",
        "tags" : [ "Content" ]
      }
    },
    "/platforms/{PlatformID}" : {
      "delete" : {
        "operationId" : "disconnect-platform",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "PlatformID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Platform"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Platform disconnected successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid platform ID or missing parameters."
          },
          "403" : {
            "description" : "Forbidden. The user does not have permission to disconnect the platform."
          },
          "404" : {
            "description" : "Not found. The platform does not exist."
          },
          "500" : {
            "description" : "Internal server error. Something went wrong on the server."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Disconnect an existing platform.",
        "tags" : [ "Platforms" ]
      },
      "post" : {
        "operationId" : "connect-platform",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "PlatformID",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Platform"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Platform connected successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid platform ID or missing parameters."
          },
          "403" : {
            "description" : "Forbidden. The user does not have permission to connect the platform."
          },
          "404" : {
            "description" : "Not found. The platform does not exist."
          },
          "500" : {
            "description" : "Internal server error. Something went wrong on the server."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Connect a new platform.",
        "tags" : [ "Platforms" ]
      }
    },
    "/platforms/sync" : {
      "post" : {
        "operationId" : "sync-all-external-platforms",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PlatformSyncRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Platform sync initiated successfully."
          },
          "400" : {
            "description" : "Bad request. Invalid sync request or missing parameters."
          },
          "401" : {
            "description" : "Unauthorized. Authentication required to sync content."
          },
          "403" : {
            "description" : "Forbidden. The user does not have permission to sync content."
          },
          "404" : {
            "description" : "Not found. The specified platform could not be found."
          },
          "500" : {
            "description" : "Internal server error. Something went wrong on the server."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Sync content from external platforms.",
        "tags" : [ "Platforms" ]
      }
    },
    "/pipeline" : {
      "get" : {
        "description" : "Get pipelines saved for a particular user. Todo is to decide whether prebuild pipelines are also send alongside user pipelines in this.",
        "operationId" : "get-pipelines-for-user",
        "responses" : {
          "200" : {
            "description" : "All pipelines defined by a particular user as well as predefined common pipelines."
          },
          "400" : {
            "description" : "No predefined or saved pipeline found."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Gets all the pipelines created by the user as well as predefined pipelines.",
        "tags" : [ "Pipeline" ]
      },
      "post" : {
        "operationId" : "create-pipeline-specification",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePipelineRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePipelineResponse"
                }
              }
            },
            "description" : "Pipeline specification created successfully."
          },
          "400" : {
            "description" : "Bad Request, invalid inputs."
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ],
        "summary" : "Creates a new user specification for content processing pipeline.",
        "tags" : [ "Pipeline" ]
      }
    }
  },
  "components" : {
    "parameters" : {
      "UserIDParam" : {
        "explode" : false,
        "in" : "path",
        "name" : "UserID",
        "required" : true,
        "schema" : {
          "type" : "string"
        },
        "style" : "simple"
      },
      "ContentIDParam" : {
        "explode" : false,
        "in" : "path",
        "name" : "ContentID",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/ContentID"
        },
        "style" : "simple"
      },
      "PlatformIDParam" : {
        "explode" : false,
        "in" : "path",
        "name" : "PlatformID",
        "required" : true,
        "schema" : {
          "$ref" : "#/components/schemas/Platform"
        },
        "style" : "simple"
      }
    },
    "schemas" : {
      "HealthResponse" : {
        "properties" : {
          "timestamp" : {
            "format" : "date-time",
            "type" : "string"
          },
          "uptime" : {
            "description" : "Server uptime in milliseconds in UNIX format",
            "type" : "integer"
          },
          "status" : {
            "description" : "Status message, e.g. for describing errors or any other health related message",
            "type" : "string"
          }
        },
        "required" : [ "status", "timestamp", "uptime" ],
        "type" : "object"
      },
      "UserProfile" : {
        "properties" : {
          "userID" : {
            "format" : "uuid",
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "email" : {
            "format" : "email",
            "type" : "string"
          },
          "avatarURL" : {
            "format" : "uri",
            "type" : "string"
          }
        },
        "required" : [ "avatarURL", "email", "userID", "username" ],
        "type" : "object"
      },
      "UserVisibility" : {
        "description" : "Whether a particular user setting or content is available for public viewing or private access. This is again subject to implementation details as without being a social media, only some users can find other users profile. Hence probably it is only for controlling the views of user profile rather than the content user posts.",
        "enum" : [ "Public", "Private" ],
        "type" : "string"
      },
      "GetUserSettingsResponse" : {
        "properties" : {
          "notifications" : {
            "type" : "boolean"
          },
          "visibility" : {
            "$ref" : "#/components/schemas/UserVisibility"
          }
        },
        "required" : [ "notifications", "visibility" ],
        "type" : "object"
      },
      "UpdateUserSettingsRequest" : {
        "properties" : {
          "notifications" : {
            "type" : "boolean"
          },
          "visibility" : {
            "$ref" : "#/components/schemas/UserVisibility"
          }
        },
        "required" : [ "notifications", "visibility" ],
        "type" : "object"
      },
      "UserAnalytics" : {
        "properties" : {
          "totalContent" : {
            "description" : "Total number of content the user has uploaded.",
            "type" : "integer"
          },
          "totalViews" : {
            "description" : "Total engagement count or view count for the content over different platforms. This is subjected to change in favour of an array of with eacch social media and their respective measurement of engagement or interaction.",
            "type" : "integer"
          }
        },
        "required" : [ "totalContent", "totalViews" ],
        "type" : "object"
      },
      "LoginRequest" : {
        "properties" : {
          "email" : {
            "format" : "email",
            "type" : "string",
            "writeOnly" : true
          },
          "password" : {
            "type" : "string",
            "writeOnly" : true
          }
        },
        "required" : [ "email", "password" ],
        "type" : "object"
      },
      "LoginResponse" : {
        "description" : "Check if requiresTwoFactorAuth is true, then use ID and generated OTP to send another request to get authentication tokens. If two factor authentication is set to false, directly access the tokens from the object.",
        "properties" : {
          "requiresTwoFactorAuth" : {
            "description" : "Whether two factor authentication is on or off. If true, accessToken and refreshToken needs to be set empty string. If false, only then the tokens contain meaningful information.",
            "type" : "boolean"
          },
          "loginAttemptID" : {
            "description" : "This is to keep track of which login attempt will be validated using the two factor authentication OTP.",
            "type" : "string"
          },
          "loginAttemptTimeStamp" : {
            "format" : "date-time",
            "type" : "string"
          },
          "accessToken" : {
            "format" : "byte",
            "type" : "string"
          },
          "refreshToken" : {
            "format" : "byte",
            "type" : "string"
          }
        },
        "required" : [ "accessToken", "loginAttemptID", "loginAttemptTimeStamp", "refreshToken", "requiresTwoFactorAuth" ],
        "type" : "object"
      },
      "TwofactorAuthRequest" : {
        "description" : "Contains a pair of login attempt ID and it's corresponding OTP.",
        "properties" : {
          "loginAttemptID" : {
            "type" : "string"
          },
          "oneTimePassword" : {
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "ErrorDetails" : {
        "properties" : {
          "target" : {
            "description" : "The target of this specific error i.e. which attribute caused the error.",
            "example" : "userID",
            "type" : "string"
          },
          "message" : {
            "description" : "Specific error message for this validation issue i.e. explanation of the error.",
            "example" : "Must be a valid UUID.",
            "type" : "string"
          }
        },
        "required" : [ "message", "target" ],
        "type" : "object"
      },
      "ErrorResponse" : {
        "example" : {
          "errors" : [ {
            "message" : "Must be a valid email address.",
            "target" : "email"
          }, {
            "message" : "Must not be empty.",
            "target" : "password"
          } ]
        },
        "properties" : {
          "errors" : {
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetails"
            },
            "type" : "array"
          }
        },
        "required" : [ "errors" ],
        "type" : "object"
      },
      "Gender" : {
        "enum" : [ "Male", "Female", "Transgender" ],
        "type" : "string"
      },
      "RegisterRequest" : {
        "properties" : {
          "firstname" : {
            "minLength" : 1,
            "type" : "string"
          },
          "middlename" : {
            "type" : "string"
          },
          "lastname" : {
            "minLength" : 1,
            "type" : "string"
          },
          "gender" : {
            "$ref" : "#/components/schemas/Gender"
          },
          "dateOfBirth" : {
            "format" : "date",
            "type" : "string"
          },
          "username" : {
            "maxLength" : 24,
            "minLength" : 4,
            "readOnly" : true,
            "type" : "string"
          },
          "email" : {
            "format" : "email",
            "type" : "string"
          },
          "password" : {
            "format" : "password",
            "maxLength" : 24,
            "minLength" : 8,
            "type" : "string",
            "writeOnly" : true
          },
          "twoFactorAuthentication" : {
            "default" : true,
            "description" : "Whether two factor authentication hould be used or not.",
            "type" : "boolean"
          },
          "mobileNumber" : {
            "pattern" : "^[+]{1}(?:[0-9\\-\\(\\)\\/\\.]\\s?){6, 15}[0-9]{1}$",
            "type" : "string"
          }
        },
        "required" : [ "dateOfBirth", "email", "firstname", "gender", "lastname", "mobileNumber", "password", "username" ],
        "type" : "object"
      },
      "Status" : {
        "description" : "Status of a job or a long running task.",
        "enum" : [ "Success", "Pending", "Error" ],
        "type" : "string"
      },
      "RegisterResponse" : {
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/Status"
          }
        },
        "required" : [ "status" ],
        "type" : "object"
      },
      "RefreshTokenRequest" : {
        "properties" : {
          "refreshToken" : {
            "type" : "string"
          }
        },
        "required" : [ "refreshToken" ],
        "type" : "object"
      },
      "RefreshTokenResponse" : {
        "properties" : {
          "accessToken" : {
            "type" : "string"
          },
          "refreshToken" : {
            "type" : "string"
          }
        },
        "required" : [ "accessToken", "refreshToken" ],
        "type" : "object"
      },
      "ForgotPasswordRequest" : {
        "properties" : {
          "email" : {
            "format" : "email",
            "type" : "string"
          }
        },
        "required" : [ "email" ],
        "type" : "object"
      },
      "ResetPasswordRequest" : {
        "properties" : {
          "oldPassword" : {
            "format" : "password",
            "type" : "string",
            "writeOnly" : true
          },
          "newPassword" : {
            "format" : "password",
            "type" : "string",
            "writeOnly" : true
          }
        },
        "required" : [ "newPassword", "oldPassword" ],
        "type" : "object"
      },
      "ContentID" : {
        "description" : "ID of the uploaded content",
        "example" : "acde070d-8c4c-4f0d-9d8a-162843c10333",
        "type" : "string"
      },
      "Platform" : {
        "description" : "Currently used device",
        "enum" : [ "Facebook", "LinkedIn", "Twitter", "Instagram", "TikTok", "Reddit", "SnapChat", "YouTube" ],
        "type" : "string"
      },
      "ContentDetails" : {
        "properties" : {
          "contentID" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "platforms" : {
            "description" : "List of platforms on which the content is published.",
            "items" : {
              "$ref" : "#/components/schemas/Platform"
            },
            "type" : "array"
          }
        },
        "required" : [ "contentID", "description", "platforms", "title" ],
        "type" : "object"
      },
      "ContentListResponse" : {
        "properties" : {
          "contents" : {
            "items" : {
              "$ref" : "#/components/schemas/ContentDetails"
            },
            "type" : "array"
          }
        },
        "required" : [ "contents" ],
        "type" : "object"
      },
      "PreSignedURLResponse" : {
        "properties" : {
          "contentID" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "preSignedURL" : {
            "description" : "Presigned URL to upload the content with specified ID into the object storage.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "required" : [ "contentID", "preSignedURL" ],
        "type" : "object"
      },
      "ContentStatus" : {
        "description" : "Current status of the uploaded content",
        "enum" : [ "Uploading", "Processing", "Published", "Failed", "Deleted", "UnderReview" ],
        "type" : "string"
      },
      "UpdateContentStatusRequest" : {
        "description" : "Changes the status of the content with given ID.",
        "properties" : {
          "updatedStatus" : {
            "$ref" : "#/components/schemas/ContentStatus"
          }
        },
        "required" : [ "updatedStatus" ],
        "type" : "object"
      },
      "CollaborationActionResponse" : {
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/Status"
          },
          "message" : {
            "type" : "string"
          }
        },
        "required" : [ "message", "status" ],
        "type" : "object"
      },
      "AccessType" : {
        "description" : "Access type for the corresponding content",
        "enum" : [ "Viewer", "Commenter", "Editor", "Owner" ],
        "type" : "string"
      },
      "UserCollaboration" : {
        "description" : "This can be used to grant a particular access to a particular user provided it is used with the content identifier. This object does not include the content identifier because it is designed to be used in a list of user collaboration objects to grant access to one content, as the owner user can at one time change access of only one content.",
        "properties" : {
          "userID" : {
            "type" : "string"
          },
          "accessType" : {
            "$ref" : "#/components/schemas/AccessType"
          }
        },
        "required" : [ "accessType", "userID" ],
        "type" : "object"
      },
      "CollaborationRequest" : {
        "properties" : {
          "contentID" : {
            "$ref" : "#/components/schemas/ContentID"
          },
          "users" : {
            "items" : {
              "$ref" : "#/components/schemas/UserCollaboration"
            },
            "type" : "array"
          }
        },
        "required" : [ "contentID", "users" ],
        "type" : "object"
      },
      "ContentAnalytics" : {
        "properties" : {
          "views" : {
            "type" : "integer"
          },
          "engagement" : {
            "type" : "integer"
          }
        },
        "required" : [ "engagement", "views" ],
        "type" : "object"
      },
      "PlatformSyncRequest" : {
        "properties" : {
          "platform" : {
            "items" : {
              "$ref" : "#/components/schemas/Platform"
            },
            "type" : "array"
          }
        },
        "required" : [ "platform" ],
        "type" : "object"
      },
      "PipelineStep" : {
        "enum" : [ 0, 1, 2, 3, 4 ],
        "type" : "integer",
        "x-enum-varnames" : [ "ClosedCaptionGeneration", "HashtagsGeneration", "DescriptionGeneration", "VoiceoverGeneration", "SoundTrackGeneration" ],
        "x-enum-descriptions" : [ "Description ClosedCaptionGeneration", "Description HashtagsGeneration", "Description DescriptionGeneration", "Description VoiceoverGeneration", "Description SoundTrackGeneration" ]
      },
      "ContentPipeline" : {
        "properties" : {
          "platform" : {
            "$ref" : "#/components/schemas/Platform"
          },
          "steps" : {
            "items" : {
              "$ref" : "#/components/schemas/PipelineStep"
            },
            "type" : "array"
          }
        },
        "required" : [ "platform", "steps" ],
        "type" : "object"
      },
      "CreatePipelineRequest" : {
        "properties" : {
          "isTemporary" : {
            "default" : true,
            "description" : "Whether to store the pipeline under user account.",
            "type" : "boolean"
          },
          "pipelineName" : {
            "description" : "Name with which the pipeline will be saved under user account. If not provided, a random name will be generated.",
            "minLength" : 1,
            "type" : "string"
          },
          "pipeline" : {
            "items" : {
              "$ref" : "#/components/schemas/ContentPipeline"
            },
            "type" : "array"
          }
        },
        "required" : [ "isTemporary", "pipeline" ],
        "type" : "object"
      },
      "CreatePipelineResponse" : {
        "description" : "Response after a particular pipeline is saved in persisting storage. The pipeline can either be saved under a particular user account or as a temporary pipeline specification for processing a single content.",
        "properties" : {
          "pipelineID" : {
            "description" : "ID to uniquely identify the saved pipeline.",
            "format" : "uuid",
            "type" : "string"
          }
        },
        "required" : [ "pipelineID" ],
        "type" : "object"
      },
      "get_content_status_200_response" : {
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/ContentStatus"
          }
        },
        "required" : [ "status" ],
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "BearerAuth" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      },
      "ApiKeyAuth" : {
        "in" : "header",
        "name" : "x-api-key",
        "type" : "apiKey"
      }
    }
  }
}